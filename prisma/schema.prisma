// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(cuid())
  name           String
  email          String   @unique
  hashedPassword String
  role           Role     @default(STAFF)
  centerId       String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  center         Center?  @relation(fields: [centerId], references: [id])
}

model Center {
  id           String    @id @default(cuid())
  name         String
  code         String    @unique
  address      String
  city         String
  state        String
  pincode      String
  phone        String
  email        String
  isMainCenter Boolean   @default(false)
  parentId     String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  parent       Center?   @relation("CenterHierarchy", fields: [parentId], references: [id])
  subCenters   Center[]  @relation("CenterHierarchy")
  students     Student[]
  courses      Course[]
  exams        Exam[]
  users        User[]
}

model Student {
  id              String           @id @default(cuid())
  registrationNo  String           @unique
  name            String
  fatherName      String
  motherName      String?
  dob             DateTime
  gender          Gender
  address         String
  city            String
  state           String
  pincode         String
  phone           String
  email           String?
  photo           String?
  aadharNo        String?
  education       String?
  centerId        String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  center          Center           @relation(fields: [centerId], references: [id])
  enrollments     Enrollment[]
  examAttempts    ExamAttempt[]
  certificateId   String?          @unique
  certificate     Certificate?     @relation(fields: [certificateId], references: [id])
  studentPayments StudentPayment[]
}

model Course {
  id          String       @id @default(cuid())
  code        String       @unique
  name        String
  description String?
  duration    Int // in months
  fees        Float
  isActive    Boolean      @default(true)
  centerId    String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  center      Center       @relation(fields: [centerId], references: [id])
  enrollments Enrollment[]
  exams       Exam[]
  subjects    Subject[]
}

model Subject {
  id          String   @id @default(cuid())
  code        String   @unique
  name        String
  description String?
  courseId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  course      Course   @relation(fields: [courseId], references: [id])
  exams       Exam[]
  marks       Mark[]
}

model Enrollment {
  id         String           @id @default(cuid())
  studentId  String
  courseId   String
  startDate  DateTime
  endDate    DateTime
  status     EnrollmentStatus @default(ACTIVE)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  student    Student          @relation(fields: [studentId], references: [id])
  course     Course           @relation(fields: [courseId], references: [id])
  marks      Mark[]
  payments   Payment[]
  certificate Certificate?
}

model Mark {
  id           String     @id @default(cuid())
  enrollmentId String
  subjectId    String
  marksObtained Float
  maxMarks      Float
  examDate     DateTime
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  enrollment   Enrollment @relation(fields: [enrollmentId], references: [id])
  subject      Subject    @relation(fields: [subjectId], references: [id])
}

model Exam {
  id          String        @id @default(cuid())
  title       String
  description String?
  courseId    String
  subjectId   String?
  examDate    DateTime
  duration    Int // in minutes
  totalMarks  Float
  passingMarks Float
  isOnline    Boolean       @default(false)
  centerId    String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  center      Center        @relation(fields: [centerId], references: [id])
  course      Course        @relation(fields: [courseId], references: [id])
  subject     Subject?      @relation(fields: [subjectId], references: [id])
  questions   Question[]
  attempts    ExamAttempt[]
}

model Question {
  id              String            @id @default(cuid())
  examId          String
  questionText    String
  questionType    QuestionType
  options         Json?
  correctAnswer   String
  marks           Float
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  exam            Exam              @relation(fields: [examId], references: [id])
  studentAnswers  StudentAnswer[]
}

model ExamAttempt {
  id             String           @id @default(cuid())
  examId         String
  studentId      String
  startTime      DateTime
  endTime        DateTime?
  totalMarks     Float?
  marksObtained  Float?
  status         ExamStatus       @default(IN_PROGRESS)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  exam           Exam             @relation(fields: [examId], references: [id])
  student        Student          @relation(fields: [studentId], references: [id])
  studentAnswers StudentAnswer[]
}

model StudentAnswer {
  id            String      @id @default(cuid())
  examAttemptId String
  questionId    String
  answer        String
  isCorrect     Boolean?
  marksObtained Float?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  examAttempt   ExamAttempt @relation(fields: [examAttemptId], references: [id])
  question      Question    @relation(fields: [questionId], references: [id])
}

model Certificate {
  id            String      @id @default(cuid())
  certificateNo String      @unique
  issueDate     DateTime
  enrollmentId  String      @unique
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  enrollment    Enrollment  @relation(fields: [enrollmentId], references: [id])
  student       Student?
}

model Payment {
  id            String          @id @default(cuid())
  enrollmentId  String
  amount        Float
  paymentDate   DateTime
  paymentMethod PaymentMethod
  reference     String?
  status        PaymentStatus   @default(PENDING)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  enrollment    Enrollment      @relation(fields: [enrollmentId], references: [id])
}

model StudentPayment {
  id           String        @id @default(cuid())
  studentId    String
  amount       Float
  paymentDate  DateTime
  paymentType  PaymentType
  description  String?
  reference    String?
  status       PaymentStatus @default(PENDING)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  student      Student       @relation(fields: [studentId], references: [id])
}

enum Role {
  ADMIN
  CENTER_ADMIN
  STAFF
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum EnrollmentStatus {
  ACTIVE
  COMPLETED
  DROPPED
  ON_HOLD
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  FILL_IN_BLANK
  DESCRIPTIVE
}

enum ExamStatus {
  IN_PROGRESS
  COMPLETED
  EVALUATED
  FAILED
  PASSED
}

enum PaymentMethod {
  CASH
  ONLINE
  CHEQUE
  UPI
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentType {
  ADMISSION
  EXAM_FEE
  CERTIFICATE_FEE
  OTHER
}
